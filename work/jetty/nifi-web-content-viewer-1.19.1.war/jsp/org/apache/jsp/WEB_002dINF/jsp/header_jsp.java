/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.49.v20220914
 * Generated at: 2023-03-21 01:48:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class header_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n");
      out.write("        <link rel=\"shortcut icon\" href=\"../nifi/images/nifi16.ico\"/>\n");
      out.write("        <title>NiFi</title>\n");
      out.write("        <link rel=\"stylesheet\" href=\"../nifi/assets/reset.css/reset.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/main.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"../nifi/css/common-ui.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"../nifi/fonts/flowfont/flowfont.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"../nifi/assets/font-awesome/css/font-awesome.min.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"../nifi/css/message-pane.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"../nifi/css/message-page.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"../nifi/js/jquery/combo/jquery.combo.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"../nifi/js/jquery/modal/jquery.modal.css\" type=\"text/css\" />\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/assets/jquery/dist/jquery.min.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/js/jquery/jquery.center.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/js/jquery/combo/jquery.combo.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/js/jquery/modal/jquery.modal.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/js/nf/nf-namespace.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/js/nf/nf-authorization-storage.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/js/nf/nf-storage.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/js/nf/nf-ajax-setup.js\"></script>\n");
      out.write("        <script type=\"text/javascript\" src=\"../nifi/js/nf/nf-universal-capture.js\"></script>\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("            var $$ = $.noConflict(true);\n");
      out.write("            $$(document).ready(function () {\n");
      out.write("                // initialize the dialog\n");
      out.write("                $$('#content-viewer-message-dialog').modal({\n");
      out.write("                    overlayBackground: false,\n");
      out.write("                    buttons: [{\n");
      out.write("                        buttonText: 'Ok',\n");
      out.write("                        color: {\n");
      out.write("                            base: '#728E9B',\n");
      out.write("                            hover: '#004849',\n");
      out.write("                            text: '#ffffff'\n");
      out.write("                        },\n");
      out.write("                        handler: {\n");
      out.write("                            click: function () {\n");
      out.write("                                $$('#content-viewer-message-dialog').modal('hide');\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }],\n");
      out.write("                    handler: {\n");
      out.write("                        close: function () {\n");
      out.write("                            $$('#content-viewer-message').text('');\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                var ref = $$('#ref').text();\n");
      out.write("                \n");
      out.write("                // create the parameters\n");
      out.write("                var params = {\n");
      out.write("                    ref: ref\n");
      out.write("                };\n");
      out.write("                \n");
      out.write("                // include the cluster node if appropriate\n");
      out.write("                var clusterNodeId = $$('#clusterNodeId').text();\n");
      out.write("                if (clusterNodeId !== '') {\n");
      out.write("                    params['clusterNodeId'] = clusterNodeId;\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                // determine the appropriate mode to select initially\n");
      out.write("                var initialMode = $$('#mode').text();\n");
      out.write("                if (initialMode === '') {\n");
      out.write("                    initialMode = 'Original';\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                var currentLocation = null;\n");
      out.write("                $$('#view-as').combo({\n");
      out.write("                    options: [{\n");
      out.write("                            text: 'original',\n");
      out.write("                            value: 'Original'\n");
      out.write("                        }, {\n");
      out.write("                            text: 'formatted',\n");
      out.write("                            value: 'Formatted'\n");
      out.write("                        }, {\n");
      out.write("                            text: 'hex',\n");
      out.write("                            value: 'Hex'\n");
      out.write("                        }],\n");
      out.write("                    selectedOption: {\n");
      out.write("                        value: initialMode\n");
      out.write("                    },\n");
      out.write("                    select: function (option) {\n");
      out.write("                        // just record the selection during creation\n");
      out.write("                        if (currentLocation === null) {\n");
      out.write("                            currentLocation = option.value;\n");
      out.write("                            return;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // if the selection has changesd, reload the page\n");
      out.write("                        if (currentLocation !== option.value) {\n");
      out.write("                            var contentParameter = {\n");
      out.write("                                mode: option.value\n");
      out.write("                            };\n");
      out.write("\n");
      out.write("                            var url = window.location.origin + window.location.pathname;\n");
      out.write("                            window.location.href = url + '?' + $$.param($$.extend(contentParameter, params));\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("            });\n");
      out.write("        </script>\n");
      out.write("    </head>\n");
      out.write("    <body class=\"message-pane\">\n");
      out.write("        <span id=\"ref\" class=\"hidden\">");
      out.print( org.apache.nifi.util.EscapeUtils.escapeHtml(request.getParameter("ref")) );
      out.write("</span>\n");
      out.write("        <span id=\"clusterNodeId\" class=\"hidden\">");
      out.print( request.getParameter("clusterNodeId") == null ? "" : org.apache.nifi.util.EscapeUtils.escapeHtml(request.getParameter("clusterNodeId")) );
      out.write("</span>\n");
      out.write("        <span id=\"mode\" class=\"hidden\">");
      out.print( request.getParameter("mode") == null ? "" : org.apache.nifi.util.EscapeUtils.escapeHtml(request.getParameter("mode")) );
      out.write("</span>\n");
      out.write("        <div id=\"content-viewer-message-dialog\">\n");
      out.write("            <div class=\"dialog-content\" style=\"margin-top: -20px;\">\n");
      out.write("                <div id=\"content-viewer-message\"></div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        <div id=\"view-as-label\">View as:</div>\n");
      out.write("        <div id=\"view-as\" class=\"pointer button-normal\"></div>\n");
      out.write("        <div id=\"content-filename\"><span class=\"content-label\">Filename:</span>");
      out.print( request.getAttribute("filename") == null ? "" : org.apache.nifi.util.EscapeUtils.escapeHtml(request.getAttribute("filename").toString()) );
      out.write("</div>\n");
      out.write("        <div id=\"content-type\"><span class=\"content-label\">Content Type:</span>");
      out.print( request.getAttribute("contentType") == null ? "" : org.apache.nifi.util.EscapeUtils.escapeHtml(request.getAttribute("contentType").toString()) );
      out.write("</div>\n");
      out.write("        <div class=\"message-pane-message-box\">\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
